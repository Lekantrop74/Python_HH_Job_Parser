import pickle
import time

from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException, TimeoutException
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options

options = Options()
options.add_argument("--headless=new")  # –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º headless
options.add_argument("--disable-gpu")
options.add_argument("--window-size=1920,1080")  # –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
options.add_argument("--no-sandbox")
options.add_argument("--disable-dev-shm-usage")
options.page_load_strategy = 'eager'


def save_cookies(Wr):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä Chrome, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ hh.ru –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç cookies –ø–æ—Å–ª–µ —Ä—É—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    Cookies —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª 'cookies.pkl' –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞.
    """
    driver = webdriver.Chrome()
    driver.get("https://hh.ru/account/login")
    input("–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ Enter...")
    with open("cookies.pkl", "wb") as file:
        pickle.dump(driver.get_cookies(), file)
    driver.quit()


def load_cookies(driver):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç cookies –∏–∑ —Ñ–∞–π–ª–∞ 'cookies.pkl' –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Selenium WebDriver.
    –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ cookies —Å—Ç—Ä–∞–Ω–∏—Ü–∞ hh.ru –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è, —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.

    :param driver: –≠–∫–∑–µ–º–ø–ª—è—Ä Selenium WebDriver
    """
    driver.get("https://hh.ru")
    with open("cookies.pkl", "rb") as file:
        for cookie in pickle.load(file):
            driver.add_cookie(cookie)
    driver.get("https://hh.ru")  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è cookies


def check_and_click_apply(driver):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ '–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è' –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ.
    –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –µ—Å—Ç—å ‚Äî –∫–ª–∏–∫–∞–µ—Ç, –∏–Ω–∞—á–µ —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ –æ—Ç–∫–ª–∏–∫ —É–∂–µ –±—ã–ª.

    :param driver: —ç–∫–∑–µ–º–ø–ª—è—Ä Selenium WebDriver
    :return: True, –µ—Å–ª–∏ –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω;
             False, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ –±—ã–ª–æ (—É–∂–µ –æ—Ç–∫–ª–∏–∫–∞–ª—Å—è –∏–ª–∏ –æ—Ç–∫–∞–∑)
    """
    try:
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É "–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è"
        apply_button = WebDriverWait(driver, 2).until(
            EC.element_to_be_clickable((
                By.XPATH,
                '//div[not(@data-qa="vacancy-serp__vacancy") and contains(@class, "magritte-card")]//span[text()="–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è"]'
            ))
        )
        apply_button.click()
        # print("‚úÖ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ '–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è' –≤—ã–ø–æ–ª–Ω–µ–Ω")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –ø—Ä–æ –≤–∞–∫–∞–Ω—Å–∏—é –≤ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω–µ
        try:
            relocate_button = WebDriverWait(driver, 1).until(
                EC.element_to_be_clickable(
                    (By.XPATH, '//span[text()="–í—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è"]/ancestor::button'))
            )
            relocate_button.click()
            # print("‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é –≤ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω–µ.")
        except TimeoutException:
            pass  # –û–∫–Ω–æ –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å ‚Äî –≤—Å—ë –Ω–æ—Ä–º–∞–ª—å–Ω–æ

        return True

    except TimeoutException:
        # print("‚è≠ –ù–µ—Ç –∫–Ω–æ–ø–∫–∏ '–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è' ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –æ—Ç–∫–ª–∏–∫–∞–ª–∏—Å—å –∏–ª–∏ –æ—Ç–∫–∞–∑")
        return False


def fill_and_submit_cover_letter(driver, vacancy_name):
    """
    –í—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –∏ –∫–ª–∏–∫–∞–µ—Ç –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏.

    :return: (—É—Å–ø–µ—Ö: bool, —Å–æ–æ–±—â–µ–Ω–∏–µ: str)
    """
    try:
        label_elem = WebDriverWait(driver, 2).until(
            EC.presence_of_element_located((By.XPATH, '//label[contains(text(), "–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ")]'))
        )
        label_id = label_elem.get_attribute("id")
        letter_field = WebDriverWait(driver, 2).until(
            EC.presence_of_element_located((By.XPATH, f'//textarea[@aria-labelledby="{label_id}"]'))
        )
        letter = generate_cover_letter(vacancy_name)
        if not letter:
            return False, "‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ: —à–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"

        letter_field.clear()
        letter_field.send_keys(letter)

    except TimeoutException:
        return False, "‚ùå –ü–æ–ª–µ –ø–∏—Å—å–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

    try:
        submit_btn = WebDriverWait(driver, 3).until(
            EC.element_to_be_clickable((By.XPATH, '//button[.//span[text()="–û—Ç–ø—Ä–∞–≤–∏—Ç—å"]]'))
        )
        submit_btn.click()
        time.sleep(1)
        return True, "‚úÖ –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
    except TimeoutException:
        return False, "‚ùå –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"


def already_applied(driver):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ –æ–Ω–æ.

    :param driver: Selenium WebDriver
    :return: True, –µ—Å–ª–∏ –ø–∏—Å—å–º–æ —É–∂–µ –µ—Å—Ç—å –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ, False –µ—Å–ª–∏ –ø–∏—Å—å–º–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–æ –ø—É—Å—Ç–æ–µ
    """
    try:
        label_elem = driver.find_element(By.XPATH, '//label[contains(text(), "–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ")]')
        label_id = label_elem.get_attribute("id")
        letter_field = driver.find_element(By.XPATH, f'//textarea[@aria-labelledby="{label_id}"]')
        existing_text = letter_field.get_attribute("value") or ""
        return bool(existing_text.strip())
    except NoSuchElementException:
        # –ï—Å–ª–∏ –ø–æ–ª–µ –ø–∏—Å—å–º–∞ –Ω–µ—Ç ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–∏—Å—å–º–æ –Ω–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ
        return False


def generate_cover_letter(name, path="src/cover_letter.txt"):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –∏–∑ —Ñ–∞–π–ª–∞ –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏.

    :param name: –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
    :param path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —à–∞–±–ª–æ–Ω–æ–º –ø–∏—Å—å–º–∞
    :return: –¢–µ–∫—Å—Ç —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞
    """
    try:
        with open(path, encoding='utf-8') as f:
            template = f.read()

        # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏, –µ—Å–ª–∏ –≤ –ø–∏—Å—å–º–µ –µ—Å—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä {vacancy_name}
        return template.format(vacancy_name=name)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∏—Å—å–º–∞: {e}")
        return None


def try_fill_and_submit(driver, vacancy_name):
    success, message = fill_and_submit_cover_letter(driver, vacancy_name)
    return success, message


def apply_to_vacancy(vacancies):
    driver = webdriver.Chrome(options=options)
    len_vacancies = len(vacancies)
    vacancy_count = 0
    applied_count = 0
    skipped_count = 0

    try:
        load_cookies(driver)

        for vacancy in vacancies:
            vacancy_url = vacancy['url']
            vacancy_name = vacancy['vacancy_name']
            vacancy_count += 1


            try:
                driver.get(vacancy_url)
                WebDriverWait(driver, 2).until(
                    lambda d: d.execute_script("return document.readyState") == "complete"
                )

                if check_and_click_apply(driver):
                    success, message = try_fill_and_submit(driver, vacancy_name)
                    if success:
                        applied_count += 1
                    else:
                        skipped_count += 1
                    status_message = f"{message}: {vacancy_name}"
                else:
                    if not already_applied(driver):
                        success, message = try_fill_and_submit(driver, vacancy_name)
                        if success:
                            applied_count += 1
                        else:
                            skipped_count += 1
                        status_message = f"{message}: {vacancy_name}"
                    else:
                        skipped_count += 1
                        status_message = f"‚è≠ –£–∂–µ –æ—Ç–∫–ª–∏–∫–∞–ª–∏—Å—å: {vacancy_name}"

            except Exception as e:
                skipped_count += 1
                status_message = f"‚ùå –û—à–∏–±–∫–∞: {vacancy_name} ({str(e)})"

            # –ï–¥–∏–Ω—ã–π –∏ —á–∏—Å—Ç—ã–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
            print(f"{status_message}\nüìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {vacancy_count}/{len_vacancies} | –ù–æ–≤—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤: {applied_count} | –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}\n")

    finally:
        print(f"\nüéØ –ò—Ç–æ–≥: –∏–∑ {len_vacancies} –≤–∞–∫–∞–Ω—Å–∏–π")
        print(f"üëâ –ù–æ–≤—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤: {applied_count}")
        print(f"‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –æ—Ç–∫–ª–∏–∫–∞–ª–∏—Å—å/–æ—à–∏–±–∫–∏): {skipped_count}")
        driver.quit()
